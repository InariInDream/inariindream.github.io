<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>完美转发 on Inari&#39;s Blog</title>
        <link>https://inariindream.cn/tags/%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</link>
        <description>Recent content in 完美转发 on Inari&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 12 Mar 2024 19:27:31 +0000</lastBuildDate><atom:link href="https://inariindream.cn/tags/%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C&#43;&#43;：std::forward的正确打开方式</title>
        <link>https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</link>
        <pubDate>Tue, 12 Mar 2024 19:27:31 +0000</pubDate>
        
        <guid>https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</guid>
        <description>&lt;img src="https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/222.png" alt="Featured image of post C&#43;&#43;：std::forward的正确打开方式" /&gt;&lt;h1 id=&#34;cstdforward的正确打开方式&#34;&gt;C++：std::forward的正确打开方式&lt;/h1&gt;
&lt;p&gt;起因是某天在群友聊天时有人问到了这个问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-09-12.png&#34;
	width=&#34;641&#34;
	height=&#34;202&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-09-12_hucfa3dd5bbc92fb97a8e565a8cb35ae29_40612_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-09-12_hucfa3dd5bbc92fb97a8e565a8cb35ae29_40612_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;317&#34;
		data-flex-basis=&#34;761px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;然后回答是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-10-50.png&#34;
	width=&#34;532&#34;
	height=&#34;182&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-10-50_hu26ffcb244e5a7ff7d6b85fce34486ef8_21865_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-10-50_hu26ffcb244e5a7ff7d6b85fce34486ef8_21865_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;292&#34;
		data-flex-basis=&#34;701px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-11-13.png&#34;
	width=&#34;676&#34;
	height=&#34;91&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-11-13_hu1ce54b613509e6811202d55d4e2b755c_4430_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-11-13_hu1ce54b613509e6811202d55d4e2b755c_4430_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;742&#34;
		data-flex-basis=&#34;1782px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-11-35.png&#34;
	width=&#34;364&#34;
	height=&#34;56&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-11-35_hu16bb3ad9447cd81a7c44c29b171c78a5_2612_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-11-35_hu16bb3ad9447cd81a7c44c29b171c78a5_2612_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;650&#34;
		data-flex-basis=&#34;1560px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-14-31.png&#34;
	width=&#34;641&#34;
	height=&#34;583&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-14-31_hu086f9d9c0d5322a0fcbc08fa589f02f9_313952_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-14-31_hu086f9d9c0d5322a0fcbc08fa589f02f9_313952_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;cppreference&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;109&#34;
		data-flex-basis=&#34;263px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-17-14.png&#34;
	width=&#34;747&#34;
	height=&#34;388&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-17-14_huac3228220b5abe208198e23adb75c6a4_159186_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-17-14_huac3228220b5abe208198e23adb75c6a4_159186_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;cppreference&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;再往前翻翻发现有人一周前就问过 &lt;del&gt;（看来确实是日经问题了）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-25-22.png&#34;
	width=&#34;666&#34;
	height=&#34;543&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-25-22_hu838593fab0e08f6ea710c701c08ac7da_41971_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-25-22_hu838593fab0e08f6ea710c701c08ac7da_41971_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-27-46.png&#34;
	width=&#34;688&#34;
	height=&#34;312&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-27-46_hu5e3def9672f3566ed5d448aec487d466_28855_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-27-46_hu5e3def9672f3566ed5d448aec487d466_28855_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;伟大的y神站了出来&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;220&#34;
		data-flex-basis=&#34;529px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-28-55.png&#34;
	width=&#34;643&#34;
	height=&#34;336&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-28-55_hue8de4f34c6b5b7f6cfd7e0066d83189c_21673_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-28-55_hue8de4f34c6b5b7f6cfd7e0066d83189c_21673_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-30-01.png&#34;
	width=&#34;671&#34;
	height=&#34;529&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-30-01_hu4a22c333b2b1fd1497ea17613e582d9d_99234_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-10-30-01_hu4a22c333b2b1fd1497ea17613e582d9d_99234_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;304px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.cppreference.com/w/cpp/language/template_argument_deduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看到这里，其实问题本身应该已经解决了，但是我发现自己对“完美转发”，“左值”和“左值引用”，“右值”和“右值引用”的概念还是不够清晰，故写一篇文章来总结一下。&lt;/p&gt;
&lt;p&gt;参考了一下&lt;a class=&#34;link&#34; href=&#34;https://zclll.com/index.php/cpp/value_category.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这篇博客&lt;/a&gt;中的内容。&lt;/p&gt;
&lt;h2 id=&#34;1-前置基础知识&#34;&gt;1. 前置基础知识&lt;/h2&gt;
&lt;h3 id=&#34;11-引用折叠&#34;&gt;1.1 引用折叠&lt;/h3&gt;
&lt;p&gt;关于引用折叠, 用书面一点的术语表达来说, 只需要记住一种情况:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;右值引用的右值引用折叠成右值引用，所有其他组合均折叠成左值引用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&amp;amp;&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt; 折叠成 &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-(分割线)-&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&amp;amp; &amp;amp;&lt;/code&gt; 折叠成 &lt;code&gt;T&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&amp;amp;&amp;amp; &amp;amp;&lt;/code&gt; 折叠成 &lt;code&gt;T&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt; 折叠成 &lt;code&gt;T&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于此, 我们能写出这样的代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T1, T2, T3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; f(T1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;arg1, T2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;arg2, T3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;arg3){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于模板参数可以直接指代带引用的类型，所以在模板实参匹配时，可能出现“引用的引用”情况。根据引用折叠，实际参数的引用类型将取决于实参的引用类型。即：这段代码对于每一个参数来说，都可以任意匹配它的左值和右值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这种引用,就被称为&amp;quot;万能引用&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-区分类型和值类别&#34;&gt;1.2 区分&amp;quot;类型&amp;quot;和&amp;quot;值类别&amp;quot;&lt;/h3&gt;
&lt;p&gt;在匹配时, 还需要区分表达式的&lt;strong&gt;类型&lt;/strong&gt;和&lt;strong&gt;值类别&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;2-模板实参推导&#34;&gt;2. 模板实参推导&lt;/h2&gt;
&lt;p&gt;回到问题本身，何谓模板实参推导？&lt;/p&gt;
&lt;p&gt;《C++ Primer》里的相关章节：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模板实参推导是指编译器使用函数调用中的实参来推断模板实参的过程。&lt;/p&gt;
&lt;h3 id=&#34;1625-模板实参推断和引用608页&#34;&gt;16.2.5 模板实参推断和引用(608页)&lt;/h3&gt;
&lt;p&gt;为了理解如何从函数调用进行类型推断，考虑下面的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; f(T &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;从左值引用函数参数推断类型&#34;&gt;从左值引用函数参数推断类型&lt;/h4&gt;
&lt;p&gt;当一个函数参数是模板类型参数的一个普通（左值）引用时（即，形如T&amp;amp;的参数），绑定规则告诉我们，只能传递给它一个左值（如，一个变量或一个返回引用类型的表达式）。实参可以是const类型，也可以不是。如果实参是const的，则T被推断为const类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; f1(T &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p); &lt;span style=&#34;color:#75715e&#34;&gt;// 实参必须是一个左值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 对f1的调用使用实参所引用的类型作为模板参数类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;f1(i); &lt;span style=&#34;color:#75715e&#34;&gt;// i是一个int，因此T是int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;f1(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 错误：传递给一个&amp;amp;参数的实参必须是一个左值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果一个函数参数的类型是const T&amp;amp;,正常的绑定规则告诉我们可以传递它任何类型的实参&amp;mdash;一个对象(const或非const),一个临时对象或是一个字面常量值。当函数参数本身是const时,T的类型推断的结果不会是一个const类型。const已经是函数参数类型的一部分; 因此,它不会也是模板参数类型的一部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-15-35-05.png&#34;
	width=&#34;333&#34;
	height=&#34;284&#34;
	srcset=&#34;https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-15-35-05_hub6a6f06c27d7c0be61c19844cf2691d9_20882_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2024/03/12/c-stdforward%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/2024-03-14-15-35-05_hub6a6f06c27d7c0be61c19844cf2691d9_20882_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;在不省略形参名字的情况下可以从ide的静态检查看得更清楚&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;281px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;从右值引用函数参数推断类型&#34;&gt;从右值引用函数参数推断类型&lt;/h4&gt;
&lt;p&gt;当一个函数参数是一个右值引用时(即,形如T&amp;amp;&amp;amp;的参数),正常的绑定规则告诉我们可以传递给它一个右值, 当我们这样做时,类型推断过程类似普通左值引用函数参数的推断过程。推断出的T的类型是该右值实参的类型:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; f3(T &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f3(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 实参是一个int类型的右值; 模板参数T被推断为int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
