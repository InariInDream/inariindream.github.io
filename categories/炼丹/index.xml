<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>炼丹 on Inari&#39;s Blog</title>
        <link>https://inariindream.cn/categories/%E7%82%BC%E4%B8%B9/</link>
        <description>Recent content in 炼丹 on Inari&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language><atom:link href="https://inariindream.cn/categories/%E7%82%BC%E4%B8%B9/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nvidia Jetson 部署教程</title>
        <link>https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</link>
        <pubDate>Sun, 28 May 2023 18:32:14 +0000</pubDate>
        
        <guid>https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</guid>
        <description>&lt;img src="https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/111.png" alt="Featured image of post Nvidia Jetson 部署教程" /&gt;&lt;h1 id=&#34;转移部署教程&#34;&gt;转移部署教程&lt;/h1&gt;
&lt;h2 id=&#34;1安装anaconda&#34;&gt;1.安装Anaconda&lt;/h2&gt;
&lt;h3 id=&#34;安装包&#34;&gt;安装包&lt;/h3&gt;
&lt;p&gt;由于是aarch64架构，所以官方没有提供编译好的conda，要从其他渠道安装。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;移动U盘中的&lt;code&gt;Archiconda3-0.2.3-Linux-aarch64.sh&lt;/code&gt;安装包到当前目录（如果不清楚当前目录在哪，可输入&lt;code&gt;pwd&lt;/code&gt;查看）&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./Archiconda3-0.2.3-Linux-aarch64.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可执行安装命令&lt;/p&gt;
&lt;h3 id=&#34;路径配置&#34;&gt;路径配置&lt;/h3&gt;
&lt;p&gt;conda应该会被安装至&lt;code&gt;/opt/conda&lt;/code&gt;下面，将其全部文件迁移到&lt;code&gt;/home/nvidia/.conda&lt;/code&gt;下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若当前目录在home&lt;/strong&gt;，使用下列命令来新建文件夹并修改权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir nvidia
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd nvidia
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir .conda
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod -R &lt;span style=&#34;color:#ae81ff&#34;&gt;777&lt;/span&gt; nvidia
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后分别打开&lt;code&gt;/home/jetson(这里是用户名，自行修改)/.bashrc&lt;/code&gt;和&lt;code&gt;/etc/profile&lt;/code&gt;，如果没有权限就使用vim进行编辑&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-29-17-31-35.png&#34;
	width=&#34;853&#34;
	height=&#34;581&#34;
	srcset=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-29-17-31-35_hue5f90cceefbe5d897d8c61e802a15046_216246_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-29-17-31-35_hue5f90cceefbe5d897d8c61e802a15046_216246_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim xxx&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;文件路径&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开编辑，按&lt;code&gt;a&lt;/code&gt;进入输入状态，按&lt;code&gt;:wq&lt;/code&gt;保存并退出&lt;/p&gt;
&lt;p&gt;在文件里加入如下几行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-29-17-27-19.png&#34;
	width=&#34;1285&#34;
	height=&#34;737&#34;
	srcset=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-29-17-27-19_hu0b9ef5710ea3afaac4b686785cee9936_271156_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-29-17-27-19_hu0b9ef5710ea3afaac4b686785cee9936_271156_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;或选择gedit也可&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo gedit xxx(文件路径)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意检查路径是否和当前的conda位置符合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意不要加在文件末尾，可以找文件中有相似格式的位置添加。&lt;/p&gt;
&lt;p&gt;然后执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source /etc/profile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来应用更改&lt;/p&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;输入&lt;code&gt;conda -V&lt;/code&gt;查看是否配置成功&lt;/p&gt;
&lt;h2 id=&#34;2配置环境&#34;&gt;2.配置环境&lt;/h2&gt;
&lt;h3 id=&#34;移动文件&#34;&gt;移动文件&lt;/h3&gt;
&lt;p&gt;将U盘里的文件先转移到任意位置&lt;/p&gt;
&lt;p&gt;将U盘里的&lt;code&gt;envs&lt;/code&gt;文件夹下的&lt;code&gt;py38&lt;/code&gt;文件夹移动到&lt;code&gt;/home/nvidia/.conda/envs&lt;/code&gt;下&lt;/p&gt;
&lt;h3 id=&#34;显式声明环境变量&#34;&gt;显式声明环境变量&lt;/h3&gt;
&lt;p&gt;打开前文提到的&lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在刚刚添加的语句后，新添一行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export LD_PRELOAD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$LD_PRELOAD:/home/nvidia/conda/envs/py38/lib/python3.8/site-packages/scikit_learn.libs/libgomp-d22c30c5.so.1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;3运行程序&#34;&gt;3.运行程序&lt;/h2&gt;
&lt;p&gt;在控制台里面使用&lt;code&gt;cd&lt;/code&gt;命令转移到U盘里deploy所转移到的的文件夹并&lt;code&gt;cd deploy&lt;/code&gt;（即当前控制台的最右边显示是&amp;rsquo;deploy&amp;rsquo;）&lt;/p&gt;
&lt;p&gt;或直接打开deploy文件夹再右键空白处点击&lt;code&gt;open terminal&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在执行过&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda activate py38
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;的情况下，直接输入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python new0612.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可运行程序&lt;/p&gt;
&lt;h2 id=&#34;4-设置开机自启动&#34;&gt;4. 设置开机自启动&lt;/h2&gt;
&lt;p&gt;在终端输入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gnome-session-properties
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或直接在搜索栏输入start即可打开Startup Applications&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-16-35-25.png&#34;
	width=&#34;583&#34;
	height=&#34;472&#34;
	srcset=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-16-35-25_huc616566243fe7fa54c264021bda541c1_21628_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-16-35-25_huc616566243fe7fa54c264021bda541c1_21628_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;296px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;然后点击Add即可添加开机时自动运行的指令了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-16-35-56.png&#34;
	width=&#34;369&#34;
	height=&#34;241&#34;
	srcset=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-16-35-56_hub20bf8fb6acff3bc3789bf10dab50fa5_16257_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-16-35-56_hub20bf8fb6acff3bc3789bf10dab50fa5_16257_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;367px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name随便填，Comment可不填，在Command栏填写&lt;code&gt;gnome-terminal&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后打开前文提到的.bashrc文件，在文件的&lt;strong&gt;末尾&lt;/strong&gt;输入以下语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda activate py38
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd deploy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python new0612.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5备份与还原&#34;&gt;5.备份与还原&lt;/h2&gt;
&lt;h3 id=&#34;tar命令&#34;&gt;tar命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;备份系统&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我该如何备份我的Ubuntu系统呢？很简单，就像你备份或压缩其它东西一样，使用TAR。和Windows不同，Linux不会限制root访问任何东西，你可以把分区上的所有东西都扔到一个TAR文件里去！&lt;/p&gt;
&lt;p&gt;首先成为root用户：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo su
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，进入根目录后，使用下面的命令备份你的系统：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar cvpzf backup.tgz --exclude=/proc --exclude=/lost+found --exclude=/backup.tgz --exclude=/mnt --exclude=/sys /
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们来简单看一下这个命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar&lt;/code&gt;当然就是我们备份系统所使用的程序了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cvpfz&lt;/code&gt;是tar的选项，意思是“创建档案文件”、“保持权限”(保留所有东西原来的权限)、“使用gzip来减小文件尺寸”。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;backup.gz&lt;/code&gt;是我们将要得到的档案文件的文件名。&lt;/p&gt;
&lt;p&gt;/是我们要备份的目录，在这里是整个文件系统。&lt;/p&gt;
&lt;p&gt;在 档案文件名“&lt;code&gt;backup.gz&lt;/code&gt;”和要备份的目录名“&lt;code&gt;/&lt;/code&gt;”之间给出了备份时必须排除在外的目录。有些目录是无用的，例如“&lt;code&gt;/proc&lt;/code&gt;”、“&lt;code&gt;/lost+ found&lt;/code&gt;”、“&lt;code&gt;/sys&lt;/code&gt;”。当然，“&lt;code&gt;backup.gz&lt;/code&gt;”这个档案文件本身必须排除在外，否则你可能会得到一些超出常理的结果。如果不把“/mnt”排 除在外，那么挂载在“/mnt”上的其它分区也会被备份。另外需要确认一下“&lt;code&gt;/media&lt;/code&gt;”上没有挂载任何东西(例如光盘、移动硬盘)，如果有挂载东西， 必须把“&lt;code&gt;/media&lt;/code&gt;”也排除在外。&lt;/p&gt;
&lt;p&gt;你还可以用Bzip2来压缩文件，Bzip2比gzip的压缩率高，但是速度慢一些。如果压缩率对你来说很重要，那么你应该使用Bzip2，用“j”代替命令中的“z”，并且给档案文件一个正确的扩展名“bz2”。完整的命令如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar cvpjf backup.tar.bz2 --exclude=/proc --exclude=/lost+found --exclude=/backup.tar.bz2 --exclude=/mnt --exclude=/sys /
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;恢复系统&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在进行恢复系统的操作时一定要小心！如果你不清楚自己在做什么，那么你有可能把重要的数据弄丢，请务必小心！&lt;/p&gt;
&lt;p&gt;接着上面的例子。切换到root用户，并把文件“backup.tgz”拷贝到分区的根目录下。&lt;/p&gt;
&lt;p&gt;在 Linux中有一件很美妙的事情，就是你可以在一个运行的系统中恢复系统，而不需要用boot-cd来专门引导。当然，如果你的系统已经挂掉不能启动了， 你可以用Live CD来启动，效果是一样的。&lt;/p&gt;
&lt;p&gt;使用下面的命令来恢复系统：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar xvpfz backup.tgz -C /
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你的档案文件是使用Bzip2压缩的，应该用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar xvpfj backup.tar.bz2 -C /
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：上面的命令会用档案文件中的文件覆盖分区上的所有文件。&lt;/p&gt;
&lt;p&gt;执行恢复命令之前请再确认一下你所键入的命令是不是你想要的，执行恢复命令可能需要一段不短的时间。&lt;/p&gt;
&lt;p&gt;恢复命令结束时，你的工作还没完成，别忘了重新创建那些在备份时被排除在外的目录：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir proc
mkdir lost+found
mkdir mnt
mkdir sys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;等等&lt;/p&gt;
&lt;p&gt;当你重启电脑，你会发现一切东西恢复到你创建备份时的样子了&lt;/p&gt;
&lt;h3 id=&#34;dd命令&#34;&gt;dd命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;磁盘克隆
也就是把整个硬盘复制一份。当然你首先需要在计算机上在接上一块新硬盘，并让系统识别。例如这块硬盘可能被识别为&lt;code&gt;/dev/sdb&lt;/code&gt;,原有硬盘叫&lt;code&gt;/dev/sda&lt;/code&gt;. 然后你可以在linux命令行上简单地执行：
&lt;code&gt;dd if=/dev/sda of=/dev/sdb&lt;/code&gt;
对就这么简单，此命令完成后，你的第二块硬盘上将有一个和第一块硬盘一模一样的副本，也是可以启动的。因为dd操作就是简单的按字节复制，什么分区表啊，MBR啊统统照搬。
当然你也可以做一些微调，来定制一下克隆操作。例如你可能希望把硬盘上的内容全部备份到一个磁盘文件中，而不是另一块新硬盘，你可以
&lt;code&gt;dd if=/dev/sda of=~/disk1.img&lt;/code&gt;
之后，disk1.img就是备份好的磁盘映像文件，你可以复制或转移到其他介质也可以压缩一下：
&lt;code&gt;gzip disk1.img #generates disk1.img.gz&lt;/code&gt;
或者在创建磁盘映像文件的同时就执行压缩：
&lt;code&gt;dd if=/dev/sda | gzip &amp;gt; disk.img.gz&lt;/code&gt;
当然，你也可以使用bzip2来压缩，它的压缩率更高，但是速度慢一些：
&lt;code&gt;dd if=/dev/sda | bzip2 &amp;gt; disk.img.bz2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分区克隆
如果我们不想克隆整块磁盘，只想把某些存放数据的分区备份一下，你会需要克隆一个分区。正如预备知识所述，分区在linux下也是一个文件。例如
&lt;code&gt;dd if=/dev/sda1 of=~/part1.img&lt;/code&gt;
将把第一块磁盘的第一个分区备份到名为&lt;code&gt;part1.img&lt;/code&gt;的文件中。
也可以进行分区复制：
&lt;code&gt;dd if=/dev/hda1 of=/dev/hda3&lt;/code&gt;
将把分区一原样复制到分区3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从镜像文件恢复磁盘或分区
很简单，把上面命令中，of和if指向的文件名互换一下即可实现恢复。例如
&lt;code&gt;dd if=disk1.img of=/dev/sda&lt;/code&gt;
把保存在disk1.img中的映像恢复到第一块磁盘
&lt;code&gt;dd if=part1.img of=/dev/hda2&lt;/code&gt;
把保存在part1.img中的映像恢复到第一块硬盘的第二个分区&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后，需要注意一点是，无论备份还是恢复，都需要保证 &lt;code&gt;of&lt;/code&gt; 指向的文件或磁盘空间要大于 &lt;code&gt;if&lt;/code&gt; 指向的内容，因为是按字节复制 如果没有足够的空间去存储内容，备份自然会失败。&lt;/p&gt;
&lt;h2 id=&#34;6配置文件参数说明&#34;&gt;6.配置文件参数说明&lt;/h2&gt;
&lt;p&gt;配置文件说明：&lt;br&gt;
本程序部分参数使用配置文件进行配置，配置文件para.json位于deploy文件夹内，具体的参数定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;序号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OPCAdd&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PLC的opc地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CamAdd&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;摄像头连接地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;lifebeat_to_etrs&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PLC端心跳包node地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;lifebeat_from_etrs&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ETRS端心跳包node地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;tray_in_pos&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;空框到位node地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;tray_empty&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;框体是否空node地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;high_top&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;检测画幅高度上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;high_bottom&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;检测画幅高度下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;width_left&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;检测画幅宽度左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;width_right&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;检测画幅宽度右&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;可能遇到的问题&#34;&gt;可能遇到的问题&lt;/h2&gt;
&lt;p&gt;Q：使用pip或者conda命令时出现&lt;code&gt;bad interpreter: No such file or directory:&lt;/code&gt;的错误&lt;/p&gt;
&lt;p&gt;A: 打开python36和.conda目录下的&lt;code&gt;bin&lt;/code&gt;文件夹，查看&lt;code&gt;pip&lt;/code&gt;文件和&lt;code&gt;conda&lt;/code&gt;文件的第一行&lt;code&gt;#！&lt;/code&gt;后面的解释器路径配置是否正确&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-18-10-09.png&#34;
	width=&#34;804&#34;
	height=&#34;464&#34;
	srcset=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-18-10-09_hu1f869a38b531761d924b0299424ab151_357793_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-18-10-09_hu1f869a38b531761d924b0299424ab151_357793_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;415px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-18-10-53.png&#34;
	width=&#34;1221&#34;
	height=&#34;556&#34;
	srcset=&#34;https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-18-10-53_hu808c6a114d5fad9bf249c46a3adc6cbf_766246_480x0_resize_box_3.png 480w, https://inariindream.cn/blog/2023/05/28/nvidia-jetson-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2023-05-31-18-10-53_hu808c6a114d5fad9bf249c46a3adc6cbf_766246_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;219&#34;
		data-flex-basis=&#34;527px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;（此处以python3.6示例，根据实际需求自行修改）&lt;/p&gt;
&lt;p&gt;若与当前目录不符，修改即可。若没权限(文件只读)则可使用&lt;code&gt;sudo vim&lt;/code&gt;命令编辑文件&lt;/p&gt;
</description>
        </item>
        <item>
        <title>炼丹问题实录</title>
        <link>https://inariindream.cn/blog/2022/12/17/%E7%82%BC%E4%B8%B9%E9%97%AE%E9%A2%98%E5%AE%9E%E5%BD%95/</link>
        <pubDate>Sat, 17 Dec 2022 10:24:08 +0000</pubDate>
        
        <guid>https://inariindream.cn/blog/2022/12/17/%E7%82%BC%E4%B8%B9%E9%97%AE%E9%A2%98%E5%AE%9E%E5%BD%95/</guid>
        <description>&lt;img src="https://inariindream.cn/blog/2022/12/17/%E7%82%BC%E4%B8%B9%E9%97%AE%E9%A2%98%E5%AE%9E%E5%BD%95/111.png" alt="Featured image of post 炼丹问题实录" /&gt;&lt;p&gt;本文用于记录在炼丹时踩过的坑，以及解决方案。&lt;/p&gt;
&lt;p&gt;之前在AutoDL训的时候很多都忘记录了&amp;hellip;只记得基本每训一次之前得改5 6个bug&lt;/p&gt;
&lt;p&gt;所以现在从padddleX开始记录。&lt;/p&gt;
&lt;h2 id=&#34;typeerror-argument-bb-has-incorrect-type-expected-numpyndarray-got-list&#34;&gt;TypeError: Argument &amp;lsquo;bb&amp;rsquo; has incorrect type (expected numpy.ndarray, got list)&lt;/h2&gt;
&lt;h1 id=&#34;问题描述&#34;&gt;问题描述&lt;/h1&gt;
&lt;p&gt;在使用自己打标好的&lt;code&gt;COCO&lt;/code&gt;数据集训练时，出现了如下错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;                                 Traceback (most recent call last)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ipykernel_128&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;738473502.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;     warmup_start_lr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;     save_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;output/mask_rcnn_r50_fpn&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;     use_vdl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cv&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;detector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; train(self, num_epochs, train_dataset, train_batch_size, eval_dataset, optimizer, save_interval_epochs, log_interval_steps, save_dir, pretrain_weights, learning_rate, warmup_steps, warmup_start_lr, lr_decay_epochs, lr_decay_gamma, metric, use_ema, early_stop, early_stop_patience, use_vdl, resume_checkpoint)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;289&lt;/span&gt;             early_stop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;early_stop,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;290&lt;/span&gt;             early_stop_patience&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;early_stop_patience,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;291&lt;/span&gt;             use_vdl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;use_vdl)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;292&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;293&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quant_aware_train&lt;/span&gt;(self,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cv&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; train_loop(self, num_epochs, train_dataset, train_batch_size, eval_dataset, save_interval_epochs, log_interval_steps, save_dir, ema, early_stop, early_stop_patience, use_vdl)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;331&lt;/span&gt;                     outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(ddp_net, data, mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;train&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;332&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;333&lt;/span&gt;                     outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;net, data, mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;train&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;334&lt;/span&gt;                 loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loss&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;335&lt;/span&gt;                 loss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backward()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cv&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;detector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; run(self, net, inputs, mode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self, net, inputs, mode):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;         net_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; net(inputs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; mode &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;train&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eval&amp;#39;&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;             outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; net_out
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddle&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fluid&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dygraph&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; __call__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;inputs, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;                 self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_built &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;901&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;902&lt;/span&gt;             outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;inputs, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;903&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;904&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; forward_post_hook &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_forward_post_hooks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;architectures&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;meta_arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; forward(self, inputs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;training:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;             out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_loss()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;             out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_pred()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;architectures&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mask_rcnn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; get_loss(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_loss&lt;/span&gt;(self, ):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;         bbox_loss, mask_loss, rpn_loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_forward()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;         loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;         loss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(rpn_loss)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;architectures&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mask_rcnn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; _forward(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;# Mask Head needs bbox_feat in Mask RCNN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;             mask_loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mask_head(body_feats, rois, rois_num, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputs,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;                                        bbox_targets, bbox_feat)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rpn_loss, bbox_loss, mask_loss
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddle&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fluid&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dygraph&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; __call__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;inputs, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;                 self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_built &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;901&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;902&lt;/span&gt;             outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;inputs, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;903&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;904&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; forward_post_hook &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_forward_post_hooks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;heads&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mask_head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; forward(self, body_feats, rois, rois_num, inputs, targets, bbox_feat, feat_func)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;244&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;training:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;245&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward_train(body_feats, rois, rois_num, inputs,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;246&lt;/span&gt;                                       targets, bbox_feat)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;247&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;248&lt;/span&gt;             im_scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scale_factor&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;heads&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mask_head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; forward_train(self, body_feats, rois, rois_num, inputs, targets, bbox_feat)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;182&lt;/span&gt;         tgt_labels, _, tgt_gt_inds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; targets
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt;         rois, rois_num, tgt_classes, tgt_masks, mask_index, tgt_weights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mask_assigner(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;184&lt;/span&gt;             rois, tgt_labels, tgt_gt_inds, inputs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;185&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;186&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;share_bbox_feat:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;proposal_generator&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;target_layer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; __call__(self, rois, tgt_labels, tgt_gt_inds, inputs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;         outs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generate_mask_target(gt_segms, rois, tgt_labels, tgt_gt_inds,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;                                     self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_classes, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mask_resolution)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# mask_rois, mask_rois_num, tgt_classes, tgt_masks, mask_index, tgt_weights&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;proposal_generator&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; generate_mask_target(gt_segms, rois, labels_int32, sampled_gt_inds, num_classes, resolution)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;351&lt;/span&gt;                 results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;352&lt;/span&gt;                     rasterize_polygons_within_box(new_segm[j], boxes[j],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;353&lt;/span&gt;                                                   resolution))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;354&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;355&lt;/span&gt;             results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;proposal_generator&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; rasterize_polygons_within_box(poly, box, resolution)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;306&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;307&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 3. Rasterize the polygons with coco api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;308&lt;/span&gt;     mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; polygons_to_mask(polygons, resolution, resolution)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;309&lt;/span&gt;     mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; paddle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_tensor(mask, dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int32&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;310&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mask
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;opt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;envs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python35&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;paddle120&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;env&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;paddlex&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ppdet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;modeling&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;proposal_generator&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; polygons_to_mask(polygons, height, width)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;282&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pycocotools.mask &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; mask_util
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;283&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(polygons) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COCOAPI does not support empty polygons&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;284&lt;/span&gt;     rles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mask_util&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frPyObjects(polygons, height, width)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;285&lt;/span&gt;     rle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mask_util&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(rles)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;286&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mask_util&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(rle)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bool)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pycocotools&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;_mask&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pyx &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pycocotools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_mask&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frPyObjects()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;: Argument &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bb&amp;#39;&lt;/span&gt; has incorrect type (expected numpy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndarray, got list)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;解决方案&#34;&gt;解决方案&lt;/h1&gt;
&lt;p&gt;这是因为json文件里面的segmentation中的数据不符合要求，正常来说这里面是类似于[x,y,x,y,x,y&amp;hellip;..x,y]按顺序排列的点序列，并且这里面的点序列个数是偶数，同时点的个数至少要超过2个（4个最稳），也就是要构面。&lt;/p&gt;
&lt;p&gt;而我在打标时用的是矩形打标，只记录了对角两个点。因此这里面的数据是[x1,y1,x2,y2]，这里面的点序列个数是4个，而且是不符合要求的，因此需要将这里面的数据转换成符合要求的数据。&lt;/p&gt;
&lt;p&gt;写一个小脚本将[x1,y1,x2,y2]转换成[x1,y1,x1,y2,x2,y2,x2,y1]，这样就符合要求了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;instances_val2017.json&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(f)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ann &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;annotations&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ann:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;segmentation&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            x1, y1, x2, y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;segmentation&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;segmentation&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x1, y1, x2, y1, x2, y2, x1, y2]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;instances_val2017.json&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(data, f, indent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;systemerror-fatal-blocking-queue-is-killed-because-the-data-reader-raises-an-exception&#34;&gt;SystemError: (Fatal) Blocking queue is killed because the data reader raises an exception.&lt;/h2&gt;
&lt;h1 id=&#34;解决方案-1&#34;&gt;解决方案&lt;/h1&gt;
&lt;p&gt;参考&lt;a class=&#34;link&#34; href=&#34;https://github.com/PaddlePaddle/PaddleX/issues/1425&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这个ISSUE&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;assertionerror-results-do-not-correspond-to-current-coco-set&#34;&gt;AssertionError: Results do not correspond to current coco set&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; set(annsImgIds)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (set(annsImgIds)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; set(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getImgIds())),\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Results do not correspond to current coco set&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;解决方案-2&#34;&gt;解决方案&lt;/h1&gt;
&lt;p&gt;COCO数据集不规范，检查下合成时有没有空的json，只有id没有坐标。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;真·解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后发现是把&lt;code&gt;eval_dataset.add_negative_samples(image_dir=&#39;o_Natural_empty_light&#39;)&lt;/code&gt;注释掉就行。。。我还重新生成了几次coco数据集。我真服了，paddle魔改完的库能不能多测试下啊&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
